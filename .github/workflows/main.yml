name: CICD

on:
  push:
    branches: [ trunk ]

jobs:
  change-matrix:
    name: Calculate changes
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-matrix.outputs.projects }}
    steps:
      - uses: actions/checkout@v3
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@11.0
        with:
          cli: 1.11.1.1347
          bb: 0.7.8
      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
          # List all files containing dependencies:
          key: cljdeps-${{ hashFiles('deps.edn') }}
          restore-keys: cljdeps- 
      - name: Get all git tags
        run: |
          git fetch --prune --unshallow --tags
          echo $?
          git tag --list
      - name: "Get projects with change"
        id: set-matrix
        run: |
          result=$(clojure -M:poly ws get:changes:changed-or-affected-projects since:stable skip:dev)
          echo 'projects='$(echo $result | bb scripts/modified_projects.clj) >> $GITHUB_OUTPUT
  
  test:
    name: Test workspace
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@11.0
        with:
          cli: 1.11.1.1347
      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
          # List all files containing dependencies:
          key: cljdeps-${{ hashFiles('deps.edn') }}
          restore-keys: cljdeps- 
      - name: Test
        run: clojure -M:poly test

  build:
    name: Build and deploy project -> ${{ matrix.project }}
    runs-on: ubuntu-latest
    needs: [change-matrix, test]
    env:
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
    strategy:
      fail-fast: false
      matrix:
        project: ${{fromJSON(needs.change-matrix.outputs.projects)}}
    steps:
      - uses: actions/checkout@v3
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@11.0
        with:
          cli: 1.11.1.1347
      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
          # List all files containing dependencies:
          key: cljdeps-${{ hashFiles('deps.edn') }}
          restore-keys: cljdeps- 
      - name: Create uberjar
        run: clojure -T:build uberjar :project ${{ matrix.project }}
      - name: Create docker image
        run: |
          cd ./projects/${{ matrix.project }}/
          clojure -T:jib jibbit.core/build

  deploy:
    name: Deploy project - ${{ matrix.project }} to OCI
    runs-on: ubuntu-latest
    needs: [change-matrix, build]
    strategy:
      fail-fast: false
      matrix:
        project: ${{fromJSON(needs.change-matrix.outputs.projects)}}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}
      - name: install ssh keys
        # check this thread to understand why its needed:
        # <https://stackoverflow.com/a/70447517>
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: Connect and pull new latest version
        run: |
          scp ./projects/${{ matrix.project }}/docker/docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.WORK_DIR }}
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
          cd ${{ secrets.WORK_DIR }} && \
          docker compose pull && \
          docker compose up -d && \
          exit"
      - name: Cleanup
        run: rm -rf ~/.ssh
      - name: Get all git tags
        run: |
          git fetch --prune --unshallow --tags
      - name: Mark commit as a stable point
        run: |
          latest_tag=$(git describe --abbrev=0 --tags)
          IFS='-' read -ra tag_parts <<< "$latest_tag"
          
          new_last_number=$(( ${tag_parts[-1]} + 1 ))
          
          new_tag="${tag_parts[0]}-$new_last_number"
          echo $new_tag
          git tag "$new_tag"
          git push origin "$new_tag"