name: CICD

on:
  push:
    branches: [ trunk ]

jobs:
  change-matrix:
    name: Calculate changes
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-matrix.outputs.projects }}
    steps:
      - uses: actions/checkout@v3
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@11.0
        with:
          cli: 1.11.1.1347
          bb: 0.7.8
      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
          # List all files containing dependencies:
          key: cljdeps-${{ hashFiles('.backend/deps.edn') }}
          restore-keys: cljdeps- 
      - name: Get all git tags
        run: |
          git fetch --prune --unshallow --tags
          echo $?
          git tag --list
      - name: "Get projects with change"
        id: set-matrix
        run: |
          result=$(clojure -M:poly ws get:changes:changed-or-affected-projects since:stable skip:dev)
          echo 'projects='$(echo $result | bb scripts/modified_projects.clj) >> $GITHUB_OUTPUT
  
  test:
    name: Test workspace
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@11.0
        with:
          cli: 1.11.1.1347
      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
          # List all files containing dependencies:
          key: cljdeps-${{ hashFiles('.backend/deps.edn') }}
          restore-keys: cljdeps- 
      - name: Test
        run: clojure -M:poly test

  build:
    name: Build and deploy project -> ${{ matrix.project }}
    runs-on: ubuntu-latest
    needs: [change-matrix, test]
    strategy:
      fail-fast: false
      matrix:
        project: ${{fromJSON(needs.change-matrix.outputs.projects)}}
    steps:
      - uses: actions/checkout@v3
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@11.0
        with:
          cli: 1.11.1.1347
      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
          # List all files containing dependencies:
          key: cljdeps-${{ hashFiles('.backend/deps.edn') }}
          restore-keys: cljdeps- 
      - name: Create uberjar
        run: clojure -T:build uberjar :project ${{ matrix.project }}
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          jdk-package: 'jdk.jlink'
      - name: Run jdeps
        run: |
          jdeps -q \
          --ignore-missing-deps \
          --multi-release 18 \
          --print-module-deps \
          ./projects/${{ matrix.project }}/target/${{ matrix.project }}.jar > jre-deps.info
      - name: Run jlink
        run: |
          jlink --verbose \
          --compress 2 \
          --strip-java-debug-attributes \
          --no-header-files \
          --no-man-pages \
          --output /jre17-slim \
          --add-modules $(cat jre-deps.info)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Deploy lambda function
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - run: |
          ls -l
          cp ./scripts/bootstrap ./projects/${{ matrix.project }}/target/
          cp ./jre17-slim/ ./projects/${{ matrix.project }}/target/
          cd ./projects/${{ matrix.project }}/target/
          cp ${{ matrix.project }}.jar function.jar
          chmod 755 bootstrap
          zip function.zip bootstrap function.jar /jre17-slim
          cp function.zip ../terraform/
          ls -l
      - run: |
          cd ./projects/${{ matrix.project }}/terraform/
          terraform init
          terraform apply -auto-approve