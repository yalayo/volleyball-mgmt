name: CICD

on:
  push:
    branches: [ trunk ]

jobs:
  change-matrix:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-matrix.outputs.projects }}
    steps:
      - uses: actions/checkout@v3
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@11.0
        with:
          cli: 1.11.1.1347
          bb: 0.7.8
      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
          # List all files containing dependencies:
          key: cljdeps-${{ hashFiles('.backend/deps.edn') }}
          restore-keys: cljdeps- 
      - name: Get all git tags
        run: |
          git fetch --prune --unshallow --tags
          echo $?
          git tag --list
      - name: "Get projects with change"
        id: set-matrix
        run: |
          result=$(clojure -M:poly ws get:changes:changed-or-affected-projects since:stable skip:dev)
          echo 'projects='$(echo $result | bb scripts/modified_projects.clj) >> $GITHUB_OUTPUT
  
  test:
    name: Test workspace
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@11.0
        with:
          cli: 1.11.1.1347
      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
          # List all files containing dependencies:
          key: cljdeps-${{ hashFiles('.backend/deps.edn') }}
          restore-keys: cljdeps- 
      - name: Test
        run: clojure -M:poly test

  build:
    name: Build and deploy project -> ${{ matrix.project }}
    runs-on: ubuntu-latest
    needs: [change-matrix, test]
    strategy:
      fail-fast: false
      matrix:
        project: ${{fromJSON(needs.change-matrix.outputs.projects)}}
    steps:
      - uses: actions/checkout@v3
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@11.0
        with:
          cli: 1.11.1.1347
      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
          # List all files containing dependencies:
          key: cljdeps-${{ hashFiles('.backend/deps.edn') }}
          restore-keys: cljdeps- 
      - name: Create uberjar
        run: clojure -T:build uberjar :project ${{ matrix.project }}
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17.0.7' # for a specific JDK 17; or '17' for the latest JDK 17
          distribution: 'graalvm'
          github-token: ${{ secrets.GH_TOKEN }}
          native-image-job-reports: 'true'
      - name: Build native-image
        run: |
          native-image --report-unsupported-elements-at-runtime \
             --initialize-at-build-time \
             --no-server \
             -jar ./projects/${{ matrix.project }}/target/${{ matrix.project }}.jar \
             -H:Name=./projects/${{ matrix.project }}/target/executable
          echo "Test run ..."
          ./projects/${{ matrix.project }}/target/executable
      - name: Deploy uberjar
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - run: |
          cd ./projects/${{ matrix.project }}/terraform/
          terraform init
      - run: zip function.zip ./projects/${{ matrix.project }}/target/${{ matrix.project }}.jar